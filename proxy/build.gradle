// ----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorized under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C)COPYRIGHT 2018 ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
// ----------------------------------------------------------------------------
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'

description = 'Proxy'

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {

    //Libs
    //runtime ("org.postgresql:postgresql:${postgresDriverVersion}")
    //compile ("org.flywaydb:flyway-core:${flywayVersion}")

    //Dependencies
    compile ("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
    //TODO:: FIX ME - version number is 54 check if we can move to 1.58 - OFERT
    compile ("com.madgag.spongycastle:pkix:${spongycastlePkixVersion}")
    compile ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    compile ("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compile ("com.googlecode.json-simple:json-simple:${jsonSimpleVersion}")
    compile ("com.upokecenter:cbor:${cborJavaVersion}")
}

//default values -- will be overriden in jenkins builds
ext.buildNumber = properties.containsKey("buildNumber") ? buildNumber : '000'
ext.scmRevision = properties.containsKey('scmRevision') ? scmRevision : '000'
ext.scmBranch   = properties.containsKey('scmBranch') ? scmBranch : 'UNKNOWN'
ext.scmMbedRevision = properties.containsKey('scmMbedRevision') ? scmMbedRevision : '000'
ext.scmMbedBranch   = properties.containsKey('scmMbedBranch') ? scmMbedBranch : 'UNKNOWN'

def String my_env = System.env.'oauth_build_env'
def isJacocoEnabled= ('jenkins'.equalsIgnoreCase(my_env))

println '[Jacoco]  Runtime Environment ...: ' + my_env
println '[Jacoco]  Is Enabled ............: ' + isJacocoEnabled

jar {
    manifest {                    
        attributes 'Main-Class': 'com.arm.mbed.dbauth.demo.ProxyMainApplication'
        attributes (
               [
                'Info-Build-Number': buildNumber,
                'Info-SCM-Revision': scmRevision,
                'Info-SCM-Branch'  : scmBranch,
                'Info-Mbed-SCM-Revision': scmMbedRevision,
                'Info-Mbed-SCM-Branch'  : scmMbedBranch,
               ],
               'ARM'
        )
    }
}

assemble.dependsOn shadowJar

test {
  useTestNG()

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // Limits the Static memory.  For unlimited, Remove this param.
  jvmArgs '-XX:MaxMetaspaceSize=512m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  jacoco {
      enabled=isJacocoEnabled
      includes ['**/*.class']
  }
}

jacoco {
    toolVersion = "0.7.9"
}

def coverageSourceDirs = ['src/main/java']

jacocoTestReport {

    enabled=isJacocoEnabled

    classDirectories = fileTree( dir: 'build/classes' )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)

    test {
        jacoco {
        }
    }

    reports {
        xml.enabled = isJacocoEnabled
        html.enabled = isJacocoEnabled
    }
}

check.dependsOn jacocoTestReport
