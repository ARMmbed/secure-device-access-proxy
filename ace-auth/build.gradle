// ----------------------------------------------------------------------------
// Copyright 2017-2019 ARM Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------
apply plugin: 'java'
apply plugin: 'eclipse'

description = 'ACE AUTH Project'

dependencies {
    //Projects
    compile project(':crypto-utils-spongy')
    //Dependencies
    compile ("com.upokecenter:cbor:${cborJavaVersion}")
}

test {
    useTestNG()

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat "full"
        showStandardStreams = true
    }
    systemProperty 'arm.build.dir', buildDir

    // If a test fails, print its stdout/stderr to the console.
    def testLog = new LinkedList<String>()
    beforeTest { TestDescriptor testDescriptor ->
        testLog.clear()
    }
    onOutput { TestDescriptor testDescriptor, TestOutputEvent testOutputEvent ->
        testLog.addAll(testOutputEvent.getMessage().split('(?m)$'))
    }
    afterTest { TestDescriptor testDescriptor, TestResult testResult ->
        if (testResult.resultType == TestResult.ResultType.FAILURE && testLog.size() > 0) {
            def title = "${testDescriptor.className}.${testDescriptor.name} output:"
            def header = 'v' * title.length()
            def footer = '^' * title.length()

            println()
            println('\033[31m' + header + '\033[37m')
            println(title)
            testLog.each { print(it) }
            println('\033[31m' + footer + '\033[37m')
        }
    }
}

configurations {
    testArtifacts.extendsFrom testRuntime
}
task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
}
artifacts {
    testArtifacts testJar
}
